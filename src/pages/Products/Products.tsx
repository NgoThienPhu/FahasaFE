import React, { useState, useMemo } from 'react'
import styles from './Products.module.css'
import { FaSearch, FaFilter, FaSort, FaShoppingCart, FaHeart } from 'react-icons/fa'

interface Book {
    id: number
    title: string
    author: string
    price: number
    originalPrice?: number
    rating: number
    cover: string
    category: string
    description: string
    inStock: boolean
}

const Products: React.FC = () => {
    const [searchTerm, setSearchTerm] = useState('')
    const [sortByName, setSortByName] = useState('name-asc')
    const [sortByPrice, setSortByPrice] = useState('price-none')
    const [sortByRating, setSortByRating] = useState('rating-none')
    const [priceRange, setPriceRange] = useState('all')
    const [category, setCategory] = useState('all')
    const [showFilters, setShowFilters] = useState(false)

    const books: Book[] = [
        { id: 1, title: 'Nh√† Gi·∫£ Kim', author: 'Paulo Coelho', price: 89000, originalPrice: 120000, rating: 4.7, cover: 'üåü', category: 'VƒÉn h·ªçc', description: 'C√¢u chuy·ªán v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm kho b√°u c·ªßa c·∫≠u b√© chƒÉn c·ª´u Santiago', inStock: true },
        { id: 2, title: '7 Th√≥i Quen C·ªßa Ng∆∞·ªùi Th√†nh ƒê·∫°t', author: 'Stephen Covey', price: 110000, rating: 4.8, cover: 'üéØ', category: 'K·ªπ nƒÉng s·ªëng', description: '7 nguy√™n t·∫Øc c∆° b·∫£n ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng trong cu·ªôc s·ªëng', inStock: true },
        { id: 3, title: 'T∆∞ Duy Nhanh V√† Ch·∫≠m', author: 'Daniel Kahneman', price: 130000, rating: 4.7, cover: 'üöÄ', category: 'Khoa h·ªçc', description: 'Kh√°m ph√° c√°ch b·ªô n√£o ho·∫°t ƒë·ªông v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh', inStock: true },
        { id: 4, title: 'Sapiens', author: 'Yuval Noah Harari', price: 140000, rating: 4.8, cover: 'üíé', category: 'L·ªãch s·ª≠', description: 'L·ªãch s·ª≠ lo√†i ng∆∞·ªùi t·ª´ th·ªùi ti·ªÅn s·ª≠ ƒë·∫øn hi·ªán t·∫°i', inStock: true },
        { id: 5, title: 'T·ª´ T·ªët ƒê·∫øn Vƒ© ƒê·∫°i', author: 'Jim Collins', price: 125000, rating: 4.7, cover: '‚≠ê', category: 'Kinh doanh', description: 'Nghi√™n c·ª©u v·ªÅ c√°c c√¥ng ty v∆∞·ª£t tr·ªôi v√† c√°ch h·ªç ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng', inStock: true },
        { id: 6, title: 'Ngh·ªá Thu·∫≠t Tinh T·∫ø C·ªßa Vi·ªác ƒê·∫øch Quan T√¢m', author: 'Mark Manson', price: 85000, rating: 4.5, cover: 'üé®', category: 'K·ªπ nƒÉng s·ªëng', description: 'C√°ch s·ªëng ƒë∆°n gi·∫£n v√† h·∫°nh ph√∫c h∆°n', inStock: true },
        { id: 7, title: 'ƒê·∫Øc Nh√¢n T√¢m', author: 'Dale Carnegie', price: 95000, rating: 4.8, cover: 'üìö', category: 'K·ªπ nƒÉng s·ªëng', description: 'Ngh·ªá thu·∫≠t thu ph·ª•c l√≤ng ng∆∞·ªùi v√† giao ti·∫øp hi·ªáu qu·∫£', inStock: true },
        { id: 8, title: 'Atomic Habits', author: 'James Clear', price: 120000, rating: 4.9, cover: 'üìñ', category: 'K·ªπ nƒÉng s·ªëng', description: 'C√°ch x√¢y d·ª±ng th√≥i quen t·ªët v√† lo·∫°i b·ªè th√≥i quen x·∫•u', inStock: true },
        { id: 9, title: 'Rich Dad Poor Dad', author: 'Robert Kiyosaki', price: 100000, rating: 4.6, cover: 'üî•', category: 'T√†i ch√≠nh', description: 'B√†i h·ªçc v·ªÅ t√†i ch√≠nh c√° nh√¢n v√† ƒë·∫ßu t∆∞', inStock: true },
        { id: 10, title: 'Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u', author: 'Rosie Nguy·ªÖn', price: 75000, rating: 4.6, cover: 'üí°', category: 'K·ªπ nƒÉng s·ªëng', description: 'H√†nh tr√¨nh kh√°m ph√° b·∫£n th√¢n v√† theo ƒëu·ªïi ƒëam m√™', inStock: true },
        { id: 11, title: 'Sapiens', author: 'Yuval Noah Harari', price: 140000, rating: 4.8, cover: 'üíé', category: 'L·ªãch s·ª≠', description: 'L·ªãch s·ª≠ lo√†i ng∆∞·ªùi t·ª´ th·ªùi ti·ªÅn s·ª≠ ƒë·∫øn hi·ªán t·∫°i', inStock: true },
        { id: 12, title: 'T∆∞ Duy Nhanh V√† Ch·∫≠m', author: 'Daniel Kahneman', price: 130000, rating: 4.7, cover: 'üöÄ', category: 'Khoa h·ªçc', description: 'Kh√°m ph√° c√°ch b·ªô n√£o ho·∫°t ƒë·ªông v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh', inStock: true },
        { id: 13, title: '7 Th√≥i Quen C·ªßa Ng∆∞·ªùi Th√†nh ƒê·∫°t', author: 'Stephen Covey', price: 110000, rating: 4.8, cover: 'üéØ', category: 'K·ªπ nƒÉng s·ªëng', description: '7 nguy√™n t·∫Øc c∆° b·∫£n ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng trong cu·ªôc s·ªëng', inStock: true },
        { id: 14, title: 'T·ª´ T·ªët ƒê·∫øn Vƒ© ƒê·∫°i', author: 'Jim Collins', price: 125000, rating: 4.7, cover: '‚≠ê', category: 'Kinh doanh', description: 'Nghi√™n c·ª©u v·ªÅ c√°c c√¥ng ty v∆∞·ª£t tr·ªôi v√† c√°ch h·ªç ƒë·∫°t ƒë∆∞·ª£c th√†nh c√¥ng', inStock: true },
        { id: 15, title: 'ƒê·∫Øc Nh√¢n T√¢m', author: 'Dale Carnegie', price: 95000, rating: 4.8, cover: 'üìö', category: 'K·ªπ nƒÉng s·ªëng', description: 'Ngh·ªá thu·∫≠t thu ph·ª•c l√≤ng ng∆∞·ªùi v√† giao ti·∫øp hi·ªáu qu·∫£', inStock: true },
        { id: 16, title: 'Atomic Habits', author: 'James Clear', price: 120000, rating: 4.9, cover: 'üìñ', category: 'K·ªπ nƒÉng s·ªëng', description: 'C√°ch x√¢y d·ª±ng th√≥i quen t·ªët v√† lo·∫°i b·ªè th√≥i quen x·∫•u', inStock: true },
        { id: 17, title: 'Rich Dad Poor Dad', author: 'Robert Kiyosaki', price: 100000, rating: 4.6, cover: 'üî•', category: 'T√†i ch√≠nh', description: 'B√†i h·ªçc v·ªÅ t√†i ch√≠nh c√° nh√¢n v√† ƒë·∫ßu t∆∞', inStock: true },
        { id: 18, title: 'Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u', author: 'Rosie Nguy·ªÖn', price: 75000, rating: 4.6, cover: 'üí°', category: 'K·ªπ nƒÉng s·ªëng', description: 'H√†nh tr√¨nh kh√°m ph√° b·∫£n th√¢n v√† theo ƒëu·ªïi ƒëam m√™', inStock: true },
        { id: 19, title: 'Nh√† Gi·∫£ Kim', author: 'Paulo Coelho', price: 89000, originalPrice: 120000, rating: 4.7, cover: 'üåü', category: 'VƒÉn h·ªçc', description: 'C√¢u chuy·ªán v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm kho b√°u c·ªßa c·∫≠u b√© chƒÉn c·ª´u Santiago', inStock: true },
        { id: 20, title: 'Ngh·ªá Thu·∫≠t Tinh T·∫ø C·ªßa Vi·ªác ƒê·∫øch Quan T√¢m', author: 'Mark Manson', price: 85000, rating: 4.5, cover: 'üé®', category: 'K·ªπ nƒÉng s·ªëng', description: 'C√°ch s·ªëng ƒë∆°n gi·∫£n v√† h·∫°nh ph√∫c h∆°n', inStock: true }
    ]

    const categories = ['T·∫•t c·∫£', 'VƒÉn h·ªçc', 'K·ªπ nƒÉng s·ªëng', 'Khoa h·ªçc', 'L·ªãch s·ª≠', 'Kinh doanh', 'T√†i ch√≠nh']

    const filteredAndSortedBooks = useMemo(() => {
        let filtered = books

        // L·ªçc theo t√™n s√°ch
        if (searchTerm) {
            filtered = filtered.filter(book =>
                book.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                book.author.toLowerCase().includes(searchTerm.toLowerCase())
            )
        }

        // L·ªçc theo th·ªÉ lo·∫°i
        if (category !== 'all') {
            filtered = filtered.filter(book => book.category === category)
        }

        // L·ªçc theo kho·∫£ng gi√°
        if (priceRange !== 'all') {
            switch (priceRange) {
                case 'under-50k':
                    filtered = filtered.filter(book => book.price < 50000)
                    break
                case '50k-100k':
                    filtered = filtered.filter(book => book.price >= 50000 && book.price < 100000)
                    break
                case '100k-200k':
                    filtered = filtered.filter(book => book.price >= 100000 && book.price < 200000)
                    break
                case 'over-200k':
                    filtered = filtered.filter(book => book.price >= 200000)
                    break
            }
        }

        // S·∫Øp x·∫øp theo t√™n
        if (sortByName !== 'name-none') {
            filtered.sort((a, b) => {
                if (sortByName === 'name-asc') {
                    return a.title.localeCompare(b.title)
                } else if (sortByName === 'name-desc') {
                    return b.title.localeCompare(a.title)
                }
                return 0
            })
        }

        // S·∫Øp x·∫øp theo gi√°
        if (sortByPrice !== 'price-none') {
            filtered.sort((a, b) => {
                if (sortByPrice === 'price-asc') {
                    return a.price - b.price
                } else if (sortByPrice === 'price-desc') {
                    return b.price - a.price
                }
                return 0
            })
        }

        // S·∫Øp x·∫øp theo ƒë√°nh gi√°
        if (sortByRating !== 'rating-none') {
            filtered.sort((a, b) => {
                if (sortByRating === 'rating-asc') {
                    return a.rating - b.rating
                } else if (sortByRating === 'rating-desc') {
                    return b.rating - a.rating
                }
                return 0
            })
        }

        return filtered
    }, [searchTerm, sortByName, sortByPrice, sortByRating, priceRange, category])

    const formatPrice = (price: number) => {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(price)
    }

    return (
        <div className={styles.products}>
            <div className={styles.container}>
                <div className={styles.header}>
                    <h1 className={styles.title}>S·∫£n ph·∫©m</h1>
                    <p className={styles.subtitle}>Kh√°m ph√° b·ªô s∆∞u t·∫≠p s√°ch ƒëa d·∫°ng c·ªßa ch√∫ng t√¥i</p>
                </div>

                {/* Filter Bar */}
                <div className={styles.filterBar}>
                    <div className={styles.filterRow}>
                        {/* Search Input */}
                        <div className={styles.searchContainer}>
                            <FaSearch className={styles.searchIcon} />
                            <input
                                type="text"
                                placeholder="T√¨m ki·∫øm theo t√™n s√°ch ho·∫∑c t√°c gi·∫£..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className={styles.searchInput}
                            />
                        </div>

                        {/* Sort by Name */}
                        <div className={styles.selectContainer}>
                            <FaSort className={styles.selectIcon} />
                            <select
                                value={sortByName}
                                onChange={(e) => setSortByName(e.target.value)}
                                className={styles.select}
                            >
                                <option value="name-none">S·∫Øp x·∫øp t√™n</option>
                                <option value="name-asc">T√™n A-Z</option>
                                <option value="name-desc">T√™n Z-A</option>
                            </select>
                        </div>

                        {/* Sort by Price */}
                        <div className={styles.selectContainer}>
                            <FaSort className={styles.selectIcon} />
                            <select
                                value={sortByPrice}
                                onChange={(e) => setSortByPrice(e.target.value)}
                                className={styles.select}
                            >
                                <option value="price-none">S·∫Øp x·∫øp gi√°</option>
                                <option value="price-asc">Gi√° th·∫•p ƒë·∫øn cao</option>
                                <option value="price-desc">Gi√° cao ƒë·∫øn th·∫•p</option>
                            </select>
                        </div>

                        {/* Sort by Rating */}
                        <div className={styles.selectContainer}>
                            <FaSort className={styles.selectIcon} />
                            <select
                                value={sortByRating}
                                onChange={(e) => setSortByRating(e.target.value)}
                                className={styles.select}
                            >
                                <option value="rating-none">S·∫Øp x·∫øp ƒë√°nh gi√°</option>
                                <option value="rating-asc">ƒê√°nh gi√° th·∫•p ƒë·∫øn cao</option>
                                <option value="rating-desc">ƒê√°nh gi√° cao ƒë·∫øn th·∫•p</option>
                            </select>
                        </div>

                        {/* Filter Toggle Button */}
                        <button
                            className={styles.filterToggle}
                            onClick={() => setShowFilters(!showFilters)}
                        >
                            <FaFilter className={styles.filterIcon} />
                            B·ªô l·ªçc
                        </button>
                    </div>

                    {/* Advanced Filters */}
                    {showFilters && (
                        <div className={styles.advancedFilters}>
                            <div className={styles.filterGroup}>
                                <label className={styles.filterLabel}>Th·ªÉ lo·∫°i:</label>
                                <select
                                    value={category}
                                    onChange={(e) => setCategory(e.target.value)}
                                    className={styles.select}
                                >
                                    <option value="all">T·∫•t c·∫£ th·ªÉ lo·∫°i</option>
                                    {categories.slice(1).map(cat => (
                                        <option key={cat} value={cat}>{cat}</option>
                                    ))}
                                </select>
                            </div>

                            <div className={styles.filterGroup}>
                                <label className={styles.filterLabel}>Kho·∫£ng gi√°:</label>
                                <select
                                    value={priceRange}
                                    onChange={(e) => setPriceRange(e.target.value)}
                                    className={styles.select}
                                >
                                    <option value="all">T·∫•t c·∫£ m·ª©c gi√°</option>
                                    <option value="under-50k">D∆∞·ªõi 50.000‚Ç´</option>
                                    <option value="50k-100k">50.000‚Ç´ - 100.000‚Ç´</option>
                                    <option value="100k-200k">100.000‚Ç´ - 200.000‚Ç´</option>
                                    <option value="over-200k">Tr√™n 200.000‚Ç´</option>
                                </select>
                            </div>
                        </div>
                    )}
                </div>

                {/* Results Info */}
                <div className={styles.resultsInfo}>
                    <span className={styles.resultsCount}>
                        Hi·ªÉn th·ªã {filteredAndSortedBooks.length} s·∫£n ph·∫©m
                    </span>
                </div>

                {/* Books Grid */}
                <div className={styles.booksGrid}>
                    {filteredAndSortedBooks.map((book) => (
                        <div key={book.id} className={styles.bookCard}>
                            <div className={styles.bookCover}>
                                <div className={styles.coverIcon}>{book.cover}</div>
                                {book.originalPrice && (
                                    <div className={styles.discountBadge}>
                                        -{Math.round((1 - book.price / book.originalPrice) * 100)}%
                                    </div>
                                )}
                                <div className={styles.bookActions}>
                                    <button className={styles.actionBtn}>
                                        <FaHeart />
                                    </button>
                                    <button className={styles.actionBtn}>
                                        <FaShoppingCart />
                                    </button>
                                </div>
                            </div>
                            
                            <div className={styles.bookContent}>
                                <h3 className={styles.bookTitle}>{book.title}</h3>
                                <p className={styles.bookAuthor}>{book.author}</p>
                                <p className={styles.bookCategory}>{book.category}</p>
                                
                                <div className={styles.bookRating}>
                                    <span className={styles.stars}>
                                        {'‚òÖ'.repeat(Math.floor(book.rating))}
                                        {'‚òÜ'.repeat(5 - Math.floor(book.rating))}
                                    </span>
                                    <span className={styles.ratingNumber}>({book.rating})</span>
                                </div>

                                <div className={styles.bookPrice}>
                                    <span className={styles.currentPrice}>{formatPrice(book.price)}</span>
                                    {book.originalPrice && (
                                        <span className={styles.originalPrice}>{formatPrice(book.originalPrice)}</span>
                                    )}
                                </div>

                                <div className={styles.bookStock}>
                                    {book.inStock ? (
                                        <span className={styles.inStock}>C√≤n h√†ng</span>
                                    ) : (
                                        <span className={styles.outOfStock}>H·∫øt h√†ng</span>
                                    )}
                                </div>

                                <button 
                                    className={`${styles.addToCartBtn} ${!book.inStock ? styles.disabled : ''}`}
                                    disabled={!book.inStock}
                                >
                                    <FaShoppingCart className={styles.btnIcon} />
                                    {book.inStock ? 'Th√™m v√†o gi·ªè' : 'H·∫øt h√†ng'}
                                </button>
                            </div>
                        </div>
                    ))}
                </div>

                {/* No Results */}
                {filteredAndSortedBooks.length === 0 && (
                    <div className={styles.noResults}>
                        <h3>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o</h3>
                        <p>H√£y th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm</p>
                    </div>
                )}
            </div>
        </div>
    )
}

export default Products
